#PART 1
import streamlit as st
from streamlit_extras.switch_page_button import switch_page
import json
import pandas as pd
from Modules import VisualHandler

st.set_page_config(
    page_title="Recipe",
    page_icon="üç≥",
    layout="wide",
    initial_sidebar_state="collapsed",
)
VisualHandler.initial()

#############################################################################################################

with open("ingredients.json", "r", encoding="utf-8") as file:
    ingredients_data = json.load(file)
medical_conditions = ["Ti·ªÉu ƒë∆∞·ªùng", "Huy·∫øt √°p cao", "D·∫° d√†y", "Gout"]
st.markdown("""
    <style>
    .ingredient-box {
        display: inline-block;
        background-color: #ffffff; /* White background */
        color: #333;
        border: 2px solid #dcdcdc; /* Light gray border */
        border-radius: 5px;
        padding: 10px;
        margin: 5px;
        text-align: center;
        font-weight: bold;
        width: 100%;
        font-size: 18px;
    }
    .ingredient-box input[type="checkbox"] {
        accent-color: #4CAF50; /* Checkbox color */
        transform: scale(1.2); /* Make the checkbox slightly larger */
    }
    </style>
""", unsafe_allow_html=True)

selected_ingredients = []
selected_conditions = []
st.title("G·ª£i √Ω m√≥n ƒÉn")
display = False

df = pd.read_csv("foods.csv")

def similarity(list1, list2):
    set1 = set(list1.split(","))
    set2 = set(list2)
    return len(set1.intersection(set2))

def link_create(ten_mon):
    row = df.loc[df['T√™n m√≥n'] == ten_mon]
    return row['C√¥ng th·ª©c'].values[0]

with st.sidebar:
    st.title("Ch·ªçn nguy√™n li·ªáu")
    for category, items in ingredients_data.items():
        st.markdown(f"**{category}**")
        ingredient_columns = st.columns(3)
        for i, ingredient in enumerate(items):
            with ingredient_columns[i % 3]:
                if st.checkbox(ingredient, key=f"{category}_{ingredient}"):
                    selected_ingredients.append(ingredient)

    st.title("B·ªánh l√Ω")
    condition_columns = st.columns(2)
    for i, condition in enumerate(medical_conditions):
        with condition_columns[i % 2]:
            if st.checkbox(condition, key=f"condition_{condition}"):
                selected_conditions.append(condition)

    button_column = st.columns([2, 1])  
    with button_column[1]: 
        if st.button("X√°c nh·∫≠n", key="confirm_button"):
            display = True
#############################################################################################################
# Th√™m thanh t√¨m ki·∫øm m√≥n ƒÉn
st.title("T√¨m ki·∫øm m√≥n ƒÉn")
search_query = st.text_input("Nh·∫≠p t√™n m√≥n ƒÉn:", "")

if search_query:
    search_results = df[df["T√™n m√≥n"].str.contains(search_query, case=False, na=False)]
    if search_results.empty:
        st.info("Kh√¥ng t√¨m th·∫•y m√≥n ƒÉn ph√π h·ª£p v·ªõi t·ª´ kh√≥a c·ªßa b·∫°n.")
    else:
        st.markdown("### K·∫øt qu·∫£ t√¨m ki·∫øm:")
        selected_recipe = st.selectbox(
            "Ch·ªçn m·ªôt m√≥n ƒÉn t·ª´ g·ª£i √Ω:",
            options=search_results["T√™n m√≥n"].tolist()
        )

        if selected_recipe:
            # L·∫•y th√¥ng tin chi ti·∫øt m√≥n ƒÉn ƒë√£ ch·ªçn
            selected_row = search_results[search_results["T√™n m√≥n"] == selected_recipe].iloc[0]
            st.markdown(
                f"""
                ### *{selected_row['T√™n m√≥n']}*
                - *Nguy√™n li·ªáu:* {selected_row['Nguy√™n li·ªáu']}
                - *Th·ªùi gian n·∫•u:* {selected_row['Time']}
                - *Calo:* {selected_row['Calo ']} kcal
                """,
                unsafe_allow_html=True
            )
            st.markdown(
                f"""
                [Xem c√¥ng th·ª©c t·∫°i ƒë√¢y]({selected_row['C√¥ng th·ª©c']})
                """,
                unsafe_allow_html=True
            )
#############################################################################################################

default_dishes = ['T√¥m chi√™n x√π','Canh rau d·ªÅn n·∫•u m·ªçc t√¥m',"Su su x√†o th·ªãt b√≤","B√≤ X√†o N·∫•m Kim Ch√¢m",
                'Tr·ª©ng chi√™n th·ªãt n·∫•m h∆∞∆°ng','Canh g√† n·∫•u c√° n·∫•m','V·ªãt om s·∫•u','T√¥m h·∫•p bia',
                'Th·ªãt l·ª£n kho tr·ª©ng c√∫t','Canh rau c·∫ßn','M·ª±c nh·ªìi th·ªãt s·ªët d·∫ßu h√†o','·ª®c g√† cu·ªôn n·∫•m kim ch√¢m']
df_filtered = df_filtered = df[df['T√™n m√≥n'].isin(default_dishes)]

if not display:# and not search_input:
    st.title("BESTT Sellers")
    cols = st.columns(3)
    for index, row in df_filtered.reset_index(drop=True).iterrows():
        col = cols[index % 3]
        with col:
            with st.container():
                st.markdown(
                    f"""
                    <div style="background-color:#e0f7fa; padding: 20px; border-radius: 10px; 
                                border: 2px solid #b0e0e6;">
                        <h3 style="color:#333;">{row[0]}</h3>
                        <p><strong>Nguy√™n li·ªáu ch√≠nh:</strong> {row[1]}</p>
                        <p><strong>Th·ªùi gian:</strong> {row[7]}</p>
                        <p><strong>Calo:</strong> {row[8]} kcal</p>
                        <a href="{link_create(row[0])}" target="_blank">
                            <button style="padding: 8px 12px; color: white; background-color: #4CAF50; 
                                        border: none; border-radius: 5px; cursor: pointer;">
                                Xem c√¥ng th·ª©c
                            </button>
                        </a>
                    </div>
                    """, 
                    unsafe_allow_html=True
                )
            st.markdown("<br>", unsafe_allow_html=True)

elif display:
    if selected_conditions:
        conditions = [~(df[col] == 1) for col in selected_conditions]
        df_loc = df[pd.concat(conditions, axis=1).all(axis=1)]
    else:
        df_loc = df.copy()
    if not selected_ingredients:
        st.warning("Vui l√≤ng ch·ªçn nguy√™n li·ªáu m√† b·∫°n c√≥.")
    else:
        df["similarity"] = df["Nguy√™n li·ªáu"].apply(lambda x: similarity(x, selected_ingredients))
        df_filtered = df[df["similarity"] > 0]
            
        if df_filtered.empty:
            st.info("CALM KITCHEN hi·ªán t·∫°i ch∆∞a c√≥ m√≥n ƒÉn ph√π h·ª£p cho nguy√™n li·ªáu c·ªßa b·∫°n.")
        else:
            df_filtered = df_filtered.sort_values("similarity", ascending=False)

        cols = st.columns(3)
        for index, row in df_filtered.reset_index(drop=True).iterrows():
            col = cols[index % 3]
            with col:
                with st.container():
                    st.markdown(
                        f"""
                        <div style="background-color:#e0f7fa; padding: 20px; border-radius: 10px; 
                                    border: 2px solid #b0e0e6;">
                            <h3 style="color:#333;">{row[0]}</h3>
                            <p><strong>Nguy√™n li·ªáu ch√≠nh:</strong> {row[1]}</p>
                            <p><strong>Th·ªùi gian:</strong> {row[7]}</p>
                            <p><strong>Calo:</strong> {row[8]} kcal</p>
                            <a href="{link_create(row[0])}" target="_blank">
                                <button style="padding: 8px 12px; color: white; background-color: #4CAF50; 
                                            border: none; border-radius: 5px; cursor: pointer;">
                                    Xem c√¥ng th·ª©c
                                </button>
                            </a>
                        </div>
                        """, 
                        unsafe_allow_html=True
                    )
                st.markdown("<br>", unsafe_allow_html=True)